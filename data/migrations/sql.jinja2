{% macro table_param(param, tbl) -%}
  {% if param.table == tbl or not param.table %}row.{{param.key}}{% else %}NULL{% endif %}
{%- endmacro -%}

{%- macro table_func(func_kind, param, tbl, table_name) -%}
CREATE OR REPLACE FUNCTION mz_calculate_{{ func_kind }}_boundaries({{ table_name }})
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_{{ func_kind }}_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, tbl) }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;
{%- endmacro -%}

-------------
-- landuse --
-------------

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['landuse']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_landuse(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_landuse_(
{%- for param in layers['landuse']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ layers['landuse']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_landuse(
       planet_osm_point)
RETURNS TEXT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_landuse(
       planet_osm_polygon)
RETURNS TEXT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_landuse_(
{%- for param in layers['landuse']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------
-- pois --
----------

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_pois_(
{%- for param in layers['pois']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS REAL AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['pois']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_pois(
       planet_osm_point)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_pois_(
{%- for param in layers['pois']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_pois(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_pois_(
{%- for param in layers['pois']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_pois_(
{%- for param in layers['pois']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ layers['pois']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_pois(
       planet_osm_point)
RETURNS TEXT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_pois_(
{%- for param in layers['pois']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_pois(
       planet_osm_polygon)
RETURNS TEXT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_pois_(
{%- for param in layers['pois']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-------------
-- transit --
-------------

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_transit_(
{%- for param in layers['transit']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS REAL AS $$
BEGIN
  RETURN {{ layers['transit']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_transit(
       planet_osm_line)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_transit(
       planet_osm_polygon)
RETURNS REAL AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_transit_(
{%- for param in layers['transit']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ layers['transit']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_transit(
       planet_osm_line)
RETURNS TEXT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_transit(
       planet_osm_polygon)
RETURNS TEXT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_transit_(
{%- for param in layers['transit']['params'] %}
        row.{{param.key}},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- WATER
----------------------------------------------------------------------

-- water kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ layers['water']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- water min_zoom "main" function

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore,
        way_area real)
RETURNS SMALLINT AS $$
DECLARE
  zoom REAL;
BEGIN
  zoom = mz_one_pixel_zoom(way_area);
  RETURN {{ layers['water']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- water kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(planet_osm_polygon)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(planet_osm_line)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(planet_osm_point)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_10m_coastline)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_50m_coastline)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_110m_coastline)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_10m_ocean)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_50m_ocean)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_110m_ocean)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_10m_lakes)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_50m_lakes)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_110m_lakes)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_10m_playas)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(ne_50m_playas)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_water(water_polygons)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'shp') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- water min_zoom table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(planet_osm_polygon)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(planet_osm_line)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(planet_osm_point)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_coastline)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_coastline)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_110m_coastline)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        0::real);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_ocean)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_ocean)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_110m_ocean)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_lakes)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_lakes)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_110m_lakes)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_10m_playas)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(ne_50m_playas)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_water(water_polygons)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_water_(
{%- for param in layers['water']['params'] %}
        {{ table_param(param, 'shp') }},
{%- endfor %}
        NULL,
        row.way_area);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- PLACES
----------------------------------------------------------------------

-- places kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_kind_places_(
{%- for param in layers['places']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ layers['places']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- places min_zoom "main" function

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS SMALLINT AS $$
BEGIN
  RETURN {{ layers['places']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- places kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_kind_places(planet_osm_point)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_places(ne_10m_populated_places)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_places(planet_osm_point)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_places(ne_10m_populated_places)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_places_(
{%- for param in layers['places']['params'] %}
        {{ table_param(param, 'ne') }},
{%- endfor %}
        NULL);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

----------------------------------------------------------------------
-- BOUNDARIES
----------------------------------------------------------------------

-- boundaries kind "main" function

CREATE OR REPLACE FUNCTION mz_calculate_kind_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS TEXT AS $$
BEGIN
  RETURN {{ layers['boundaries']['kind_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- boundaries min_zoom "main" function

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{param.key}} {{param.typ}},
{%- endfor %}
        tags hstore)
RETURNS SMALLINT AS $$
BEGIN
  RETURN {{ layers['boundaries']['min_zoom_case_statement'] }};
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- boundaries kind table adaptors

CREATE OR REPLACE FUNCTION mz_calculate_kind_boundaries(planet_osm_line)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_kind_boundaries(planet_osm_polygon)
RETURNS text AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_kind_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

{{ table_func('kind', param, 'ne', 'ne_110m_admin_0_boundary_lines_land') }}
{{ table_func('kind', param, 'ne', 'ne_50m_admin_0_boundary_lines_land') }}
{{ table_func('kind', param, 'ne', 'ne_50m_admin_1_states_provinces_lines') }}
{{ table_func('kind', param, 'ne', 'ne_10m_admin_0_boundary_lines_land') }}
{{ table_func('kind', param, 'ne', 'ne_10m_admin_1_states_provinces_lines') }}

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_boundaries(planet_osm_line)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

CREATE OR REPLACE FUNCTION mz_calculate_min_zoom_boundaries(planet_osm_polygon)
RETURNS SMALLINT AS $$
DECLARE
  row ALIAS FOR $1;
BEGIN
  RETURN mz_calculate_min_zoom_boundaries_(
{%- for param in layers['boundaries']['params'] %}
        {{ table_param(param, 'osm') }},
{%- endfor %}
        row.tags);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

{{ table_func('min_zoom', param, 'ne', 'ne_110m_admin_0_boundary_lines_land') }}
{{ table_func('min_zoom', param, 'ne', 'ne_50m_admin_0_boundary_lines_land') }}
{{ table_func('min_zoom', param, 'ne', 'ne_50m_admin_1_states_provinces_lines') }}
{{ table_func('min_zoom', param, 'ne', 'ne_10m_admin_0_boundary_lines_land') }}
{{ table_func('min_zoom', param, 'ne', 'ne_10m_admin_1_states_provinces_lines') }}
